;; people functions go here
to select-target-patch 
  ;; if agents are pushed harder than they are able to push, then they must select the patch in the direction of the force 
  ifelse magnitude net-forces pforce > push-force 
  [
    ; round push vector to cardinal direction, then set the patch in that direction as target 
    let push-heading cardinal-4 vector-direction net-forces pforce
    set target-patch patch-at-heading-and-distance push-heading 1 
;    show (word "agent " who " is being pushed in direction " push-heading)
  ]
  ;; else, select a target patch and move accordingly 
  [
    set target-patch max-one-of neighbors4 [ desirability ]
  ]
  
  ;; failsafe
  if target-patch = nobody [ set target-patch patch-here ]
end 

to deadpeople-attempt-move
  ; round push vector to cardinal direction, then set the patch in that direction as target 
  let push-heading cardinal-4 vector-direction net-forces pforce
  set target-patch patch-at-heading-and-distance push-heading 1 
  face target-patch
  
  ; if the patch is unoccupied and pathable, move into it (but don't push, and don't update dynamic field) 
  if count [ turtles-here ] of target-patch >= crowd-density or [pcolor] of target-patch != white [
    fd 1 
  ] 
end

to attempt-move  
  face target-patch    ; we face target patch first because this affects both our movement and pushing behavior 
  (ifelse 
    count [ turtles-here ] of target-patch >= crowd-density or [pcolor] of target-patch != white [
      set obstructed? true
    ]
  
    ; if target patch is not agent's current patch, then move 
    not (target-patch = patch-here)
    [ 
      update-dynamic-field    ; instruction to the patch the agent is on 
      fd 1 
    ]
  )
end

;to attempt-circumvent
;  ; randomly turn left or right for first consideration (random is to avoid biasing agents towards either direction 
;  ifelse random-float 1 < 0.5 [lt 90] [rt 90]
;  
;  if any? [people-here] of patch-ahead 1 or any? [deadpeople-here] of patch-ahead 1 [
;    ; if the patch to the right is occupied, try the patch to the left 
;    rt 180 
;  ]
;  
;  ; after rotating (or not), check the patch again. If there's no one in there, move. 
;  ifelse any? [people-here] of patch-ahead 1 or any? [deadpeople-here] of patch-ahead 1 
;  [
;    update-dynamic-field
;    fd 1
;  ]
;  ; if still obstructed, fail the move. Reorient to target patch and prepare to shove the guy in front 
;  [
;    set obstructed? true 
;    face target-patch
;  ]
;end

;;this method kills people if they have endured a lethal amount of pressure for a certain amount of time. 
;;current-threshold calculates the current threshold of lethal force on them based on the amount of time that has passed
;;death-threshold represents the cumulative force endured required to kill the person
;;a person changes breed to dead people after dying
to respond-to-pressure
  ;check if the agent has exceeded fatal pressure
  let x ticks

  ;arbitrarily slow down pressure response. added this if-condition to only kill people at every 13th tick, alternatively, we can slow down the model which may affect smoothness
  if (x % 13 = 0)[

  ;nonlinear pressure over time model
  let current-threshold (13250 + (1384581000 - 575.0025) / (1 + (x / 0.0000001875485 ) ^ 0.7806964))
  
  let death-threshold ( x * current-threshold )

  ;;to calibrate this based on compatibility with the unit of force
  set death-threshold death-threshold / 10
  
  if (pressure-endured >= death-threshold)[
    set color grey
    set breed deadpeople 
  ]
  ]
end

;;update pressure method to add to endured pressure every tick
;; if the pressure on the person continues to be above a certain threshold, the person's cumulative pressure (endured-pressure) will increase by the sum of all 4 directional forces.
to update-pressure

  let current-total-force sum [pforce] of patch-here / 4
  ;;show current-total-force

  ifelse current-total-force < min-pressure 
  [ set pressure-endured 0 ]
;  
  [ set pressure-endured pressure-endured + current-total-force ]
;  set pressure-endured pressure-endured + current-total-force
  
end


;implementation approach: keep a track of how many ticks have passed with the fore being sustained. If it exceeds the threshold, then kill the person. 
to push       
  ;; get direction of push 
  let push-direction convert-heading-to-cardinal-index heading  
  
  ;; add force to current patch, in the direction of the push. Subtract force in the direction away from the push. 
  set pforce replace-item push-direction pforce (item push-direction pforce + push-force / 2)
  
  set push-direction ( push-direction + 2 ) mod 4
  set pforce replace-item push-direction pforce (max list 0 (item push-direction pforce - push-force / 2))
end

to push-to-maintain-space      ;; TODO one quarter of the pushing force (kresist = 0.25 kpush) is vector-added into each adjacent occupied cell in the direction of that cell
  let maintain-push-force push-force / 4
  if xcor > min-pxcor and xcor < max-pxcor and ycor > min-pycor and ycor < max-pycor [
    foreach [ 0 1 2 3 ] [
      x -> set pforce replace-item x pforce (item x pforce + maintain-push-force)
    ]
  ]
end 
