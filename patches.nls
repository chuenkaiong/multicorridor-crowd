to spawn-people
    ;; this is run by blue patches to spawn people, simulating their entrance into the MCS 
  if random-float 1 < inflow-rate and count people-here = 0 [
    sprout-people 1 [ 
      set pressure-endured 0 
      face one-of patches with [is-attraction? = true]
    ]
  ]
end

to update-desirability 
  ; run in patch context. evaluates desirability based on the formula 
  let occupation-coefficient 0.5
  set desirability (e ^ ( follow-tendency * dynamic )) * (e ^ ( attraction-tendency * static )) * pathable * occupation-coefficient
end

  
to propagate-forces
  ;; The basic force rule is that as a part of each time step, the entire force on a particular cell moves on to the next cell (in the direction of the force vector)
  ;; Forces that collide on a cell are vector added together. Force cannot be propagated through empty space 
  ;; if force becomes stranded on an empty space its magnitude is reduced to zero. Walls and obstacles absorb force, and do not re-transmit it.
  if any? people-here and not (pforce = [ 0 0 ]) [
    let propagation-target-patch patch-at-heading-and-distance vector-direction pforce 0.8 ; 0.8 is to account for diagonals. Can explore only propagating forces in cardinal directions with the cardinal-4 function too. 
    if not (propagation-target-patch = nobody) [
      ask propagation-target-patch [ set pforce-incoming vector-add pforce-incoming [ pforce ] of myself ]
    ]
  ]
  
  
end

to update-dynamic-field
  set dynamic dynamic * (1 - dynamic-decay) 
end


to diffuse-dynamic-fields
  ask patches [ set dynamic dynamic * ( 1 - dynamic-decay ) ]
  diffuse dynamic 0.5
end