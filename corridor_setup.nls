to setup-1

  ;path
  ask patches with [abs pycor <= avenue-width / 2] [set pcolor white]
  ;spawn points
  ask patches with [abs pycor <= avenue-width / 2 and abs pxcor = max-pxcor] [set pcolor blue]


  (ifelse
    corridor-system = 1 [
      setup-corridor 0 true
    ]
    
    corridor-system = 2 [
      setup-corridor 0 true
      setup-corridor 0 false
    ]
    
    corridor-system = 3 [
      setup-corridor 3 true
      setup-corridor -20 false
      setup-corridor 25 false
    ]
    corridor-system = 5 [
      setup-corridor 15 true
      setup-corridor -27 true
      setup-corridor 31 false
      setup-corridor 6 false
      setup-corridor -36 false
    ]
    ; corridor-system = 7
    [
      setup-corridor -34 true
      setup-corridor -11 true
      setup-corridor 30 true
      setup-corridor -38 false
      setup-corridor -5 false
      setup-corridor 17 false
      setup-corridor 40 false
  ])

  if obstacles [create-obstacles]
  if train-station [create-trainstation]

  setup-attractions 
  set-static-potentials

end


to setup-corridor [corr-point top]
  set corr-point 0 - corr-point
  let edge 0
  ifelse (top) [set edge max-pycor][set edge min-pycor] ;used for spawn points

  ;path
  ifelse (top) [
    ask patches with [abs (pxcor + corr-point) <= corridor-width / 2 and pycor > 0 ] [set pcolor white]]
  [ask patches with [abs (pxcor + corr-point) <= corridor-width / 2 and pycor < 0 ] [set pcolor white]]

  ;spawn points
   ask patches with [abs (pxcor + corr-point) <= corridor-width / 2 and pycor = edge ] [set pcolor blue]
end

to setup-attractions 
  (ifelse 
    attraction-setup = "1, centrally located" [
      ask patch 0 0 [ become-attraction ]
    ]
    attraction-setup = "2, evenly spaced" [
      ask patch -25 0 [ become-attraction ]
      ask patch 25 0 [ become-attraction ]
    ]
    attraction-setup = "1 central and 4 on walls" [
      ;; this needs work. represents TV screens mirroring the main attraction, diverting attention and hopefully preventing crowds from reaching dangerous densities. 
      ;; these are currently treated as primary attractions, meaning that they have the same weight as the main attraction. In reality, people should ignore these if they can see the main attraction. 
      ;; maybe some kind of vision radius is needed. 
      ask patch 0 0 [ become-attraction ]
      foreach [-30 -10 10 30] [x -> ask patch x (corridor-width - 3) [become-attraction]]
    ]
  )
end

to create-obstacles

  let edge-distance 4 ;distance from avenue border
  let obstacle-size 2 ; size of obstacle
  let prob-obstacle 0.5 ; probability of patch being an obstacle


  ask patches with [abs pycor = (avenue-width / 2) - edge-distance and pcolor = white] [
    let px pxcor
    let py pycor

    ;top line
    ifelse (pycor > 0) [
      if [pcolor] of patch pxcor (pycor + edge-distance + 1) = black and random-float 1 < prob-obstacle [
        ask patches with [pxcor = px and pycor <= py and pycor > py - obstacle-size  ] [ ;;avoid blocking corridors
          set pcolor black
        ]
      ]
    ]
    ;bottom line
    [
      if [pcolor] of patch pxcor (pycor - edge-distance - 1) = black and random-float 1 < prob-obstacle [
        ask patches with [pxcor = px and pycor >= py and pycor < py + obstacle-size  ] [
          set pcolor black
        ]
      ]
    ]
  ]
end

to create-trainstation
  let station-width 2
  let station-point 25
  ask patches with [abs pycor <= station-width and abs pxcor = station-point] [set pcolor blue]
end

to set-static-potentials
  ask patches [
    ; TODO - define potentials for the attraction squares themselves
    ifelse pcolor = white
    [
      set pathable 1
      ;; if a patch is on a feeder corridor, agnets will prefer to follow the corridor to the main street. 
      ;; once on the main street, they will follow the straight-line path towards the attraction. 
      ifelse abs pycor > avenue-width / 2 [
        set static max-pycor - abs pycor 
      ]
      [
        let closest-attraction one-of patches with [ is-attraction? = true ] with-min [distance myself]
        set static max-pycor - (distance closest-attraction) + max-pycor  ;; max-pycor is added so that the score of the main street is always greater than the score of the adjacent corridor, 
                                                                          ;; without affecting pathing within the corridor itself. 
      ]
      
    ]
    [
      set pathable 0
    ]
  ]
end